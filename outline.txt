Set up project outline, installing dependencies:
    1. npm install nodemon --save-dev
        nodemon for watching app in development stage
    2. npm install @babel/core @babel/node --save-dev
        Babel transpiles your code to vanilla JavaScript
    3. npm install @babel/preset-env --save-dev
        add .babelrc preset
    4. npm install dotenv --save
        -allows the .env variables in the source code to work
        -Add import 'dotenv/config' to the file using the .env variables
    5. npm install express
        -install the app, initialize it and use app.lister(port)
    6. npm install cors
        -Cross origian resource sharing, using this will allow other web sites to use ours
    7. npm install mongoose 
        -Install for mongoose models and the mongoDB interface
    8. npm install ejs 
        -install ejs as the view engine, also add the following to app.js: app.set('view engine', 'ejs');
    9. npm install mongoose
        -Needed for MongoDB connection ( https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose#Designing_the_LocalLibrary_models )

Next Steps:

DONE:
    1. Set up MongoDB and get the User model working

DONE:
    2. Set up Authentication with Passport using Tokens optionally

DONE:
    3. Get Stylesheets to work with ejs views
        -Probably has to do with static route, need to move app.js to route of folder
            and then move everything to Public folder like ni the members-only project
        -Try a new project with express-generator to see how it is laid out
        --app.use(express.static('src')); had to use the preceeding...

DONE:
    4. Get an understanding of the Alpha Vantage API

DONE:
    5. Maybe use Python for charting the stock data

DONE:
    6. Get POST to work for new user sign up
        --had to set method="POST" not action="POST"
DONE:
    7. Create an Object for container the stock tickers, user should be able to add new stocks to the object.
        - Clicking the object should rechart with the correct data
        --Ended up using an Array in the User Model for storing Stock tickers.

8. Validate that the stocks are real that the user tries to submit
    1. Check if stock ticker exists through an API? 
    2. Make sure the stock ticker gos toUppercase() before putting into the stock array.



DONE:
    9. Got the JSON stock data, how to pass that back to the chart.ejs view and show the correct data?  
        -https://www.digitalocean.com/community/tutorials/how-to-use-ejs-to-template-your-node-application

10. CSS Visual Updates:
    1. Make the stock background color change if the user has it currently selected
    2. Make the stock holder div a scrollable thing so that the chart stays in place if the user list is very long
    3. Organize the stocks in Alphabetical order?

11. Allow user to select different date ranges
    1. Filter the data based off the Months? 